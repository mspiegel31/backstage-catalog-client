# generated by datamodel-codegen:
#   filename:  EntityEnvelope
#   timestamp: 2024-02-27T19:34:26+00:00

from __future__ import annotations

from typing import Optional

from pydantic import BaseModel, ConfigDict, Field, constr


class Metadata(BaseModel):
    model_config = ConfigDict(
        extra="allow",
    )
    name: constr(min_length=1) = Field(
        ...,
        description="The name of the entity. Must be unique within the catalog at any given point in time, for any given namespace + kind pair.",
        examples=["metadata-proxy"],
    )
    namespace: Optional[constr(min_length=1)] = Field(
        "default",
        description="The namespace that the entity belongs to.",
        examples=["default", "admin"],
    )


class Model(BaseModel):
    model_config = ConfigDict(
        extra="allow",
    )
    apiVersion: constr(min_length=1) = Field(
        ...,
        description="The version of specification format for this particular entity that this is written against.",
        examples=["backstage.io/v1alpha1", "my-company.net/v1", "1.0"],
    )
    kind: constr(min_length=1) = Field(
        ...,
        description="The high level entity type being described.",
        examples=[
            "API",
            "Component",
            "Domain",
            "Group",
            "Location",
            "Resource",
            "System",
            "Template",
            "User",
        ],
    )
    metadata: Metadata
