# generated by datamodel-codegen:
#   filename:  Component
#   timestamp: 2024-02-27T19:34:26+00:00

from __future__ import annotations

from enum import Enum
from typing import Optional

from pydantic import BaseModel, Field, constr

from .Entity import Entity


class ApiVersion(Enum):
    backstage_io_v1alpha1 = "backstage.io/v1alpha1"
    backstage_io_v1beta1 = "backstage.io/v1beta1"


class Kind(Enum):
    Component = "Component"


class Spec(BaseModel):
    type: constr(min_length=1) = Field(
        ...,
        description="The type of component.",
        examples=["service", "website", "library"],
    )
    lifecycle: constr(min_length=1) = Field(
        ...,
        description="The lifecycle state of the component.",
        examples=["experimental", "production", "deprecated"],
    )
    owner: constr(min_length=1) = Field(
        ...,
        description="An entity reference to the owner of the component.",
        examples=["artist-relations-team", "user:john.johnson"],
    )
    system: Optional[constr(min_length=1)] = Field(
        None,
        description="An entity reference to the system that the component belongs to.",
    )
    subcomponentOf: Optional[constr(min_length=1)] = Field(
        None,
        description="An entity reference to another component of which the component is a part.",
    )
    providesApis: Optional[list[constr(min_length=1)]] = Field(
        None,
        description="An array of entity references to the APIs that are provided by the component.",
    )
    consumesApis: Optional[list[constr(min_length=1)]] = Field(
        None,
        description="An array of entity references to the APIs that are consumed by the component.",
    )
    dependsOn: Optional[list[constr(min_length=1)]] = Field(
        None,
        description="An array of references to other entities that the component depends on to function.",
    )


class Model(Entity.Model):
    model_config = ConfigDict(
        extra="allow",
    )
    apiVersion: Optional[ApiVersion] = None
    kind: Optional[Kind] = None
    spec: Spec
