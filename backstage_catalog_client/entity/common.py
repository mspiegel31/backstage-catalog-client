# generated by datamodel-codegen:
#   filename:  common
#   timestamp: 2024-02-27T19:34:26+00:00

from __future__ import annotations

from enum import Enum
from typing import Optional

from pydantic import BaseModel, ConfigDict, Field, constr


class Model(BaseModel):
    pass
    model_config = ConfigDict(
        extra="allow",
    )


class Reference(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    kind: constr(min_length=1) = Field(..., description="The kind field of the entity.")
    namespace: constr(min_length=1) = Field(..., description="The metadata.namespace field of the entity.")
    name: constr(min_length=1) = Field(..., description="The metadata.name field of the entity.")


class Relation(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: constr(pattern=r"^\w+$", min_length=1) = Field(..., description="The type of relation.")
    target: Optional[Reference] = None
    targetRef: constr(min_length=1) = Field(..., description="The entity ref of the target of this relation.")


class StatusLevel(Enum):
    info = "info"
    warning = "warning"
    error = "error"


class Error(BaseModel):
    model_config = ConfigDict(
        extra="allow",
    )
    name: constr(min_length=1) = Field(..., description="The type name of the error", examples=["Error", "InputError"])
    message: str = Field(..., description="The message of the error")
    code: Optional[str] = Field(None, description="An error code associated with the error")
    stack: Optional[str] = Field(None, description="An error stack trace")


class StatusItem(BaseModel):
    model_config = ConfigDict(
        extra="allow",
    )
    type: constr(min_length=1)
    level: StatusLevel = Field(..., description="The status level / severity of the status item.")
    message: str = Field(
        ...,
        description="A brief message describing the status, intended for human consumption.",
    )
    error: Optional[Error] = Field(None, description="An optional serialized error object related to the status.")


class Status(BaseModel):
    model_config = ConfigDict(
        extra="allow",
    )
    items: Optional[list[StatusItem]] = None
