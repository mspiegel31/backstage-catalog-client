# generated by datamodel-codegen:
#   filename:  User
#   timestamp: 2024-02-27T19:48:38+00:00

from __future__ import annotations

from enum import Enum
from typing import Optional

from pydantic import BaseModel, ConfigDict, Field, RootModel

from .Entity import Model as Model_1


class ApiVersion(Enum):
    backstage_io_v1alpha1 = "backstage.io/v1alpha1"
    backstage_io_v1beta1 = "backstage.io/v1beta1"


class Kind(Enum):
    User = "User"


class Profile(BaseModel):
    displayName: Optional[str] = Field(
        None,
        description="A simple display name to present to users.",
        examples=["Jenny Doe"],
        min_length=1,
    )
    email: Optional[str] = Field(
        None,
        description="An email where this user can be reached.",
        examples=["jenny-doe@example.com"],
        min_length=1,
    )
    picture: Optional[str] = Field(
        None,
        description="The URL of an image that represents this user.",
        examples=["https://example.com/staff/jenny-with-party-hat.jpeg"],
        min_length=1,
    )


class MemberOfItem(RootModel[str]):
    root: str = Field(..., examples=["team-b", "employees"], min_length=1)


class Spec(BaseModel):
    profile: Optional[Profile] = Field(
        None,
        description="Optional profile information about the user, mainly for display purposes. All fields of this structure are also optional. The email would be a primary email of some form, that the user may wish to be used for contacting them. The picture is expected to be a URL pointing to an image that's representative of the user, and that a browser could fetch and render on a profile page or similar.",
    )
    memberOf: list[MemberOfItem] = Field(
        ...,
        description="The list of groups that the user is a direct member of (i.e., no transitive memberships are listed here). The list must be present, but may be empty if the user is not member of any groups. The items are not guaranteed to be ordered in any particular way. The entries of this array are entity references.",
    )


class Model(Model_1):
    model_config = ConfigDict(
        extra="allow",
    )
    apiVersion: Optional[ApiVersion] = None
    kind: Optional[Kind] = None
    spec: Spec
