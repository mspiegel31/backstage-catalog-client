# generated by datamodel-codegen:
#   filename:  Location
#   timestamp: 2024-02-27T19:34:26+00:00

from __future__ import annotations

from enum import Enum
from typing import Optional

from pydantic import BaseModel, ConfigDict, Field, constr

from .Entity import Model as Model_1


class ApiVersion(Enum):
    backstage_io_v1alpha1 = "backstage.io/v1alpha1"
    backstage_io_v1beta1 = "backstage.io/v1beta1"


class Kind(Enum):
    Location = "Location"


class Presence(Enum):
    required = "required"
    optional = "optional"


class Spec(BaseModel):
    type: Optional[constr(min_length=1)] = Field(
        None,
        description="The single location type, that's common to the targets specified in the spec. If it is left out, it is inherited from the location type that originally read the entity data.",
        examples=["url"],
    )
    target: Optional[constr(min_length=1)] = Field(
        None,
        description="A single target as a string. Can be either an absolute path/URL (depending on the type), or a relative path such as ./details/catalog-info.yaml which is resolved relative to the location of this Location entity itself.",
        examples=["./details/catalog-info.yaml"],
    )
    targets: Optional[list[constr(min_length=1)]] = Field(
        None,
        description="A list of targets as strings. They can all be either absolute paths/URLs (depending on the type), or relative paths such as ./details/catalog-info.yaml which are resolved relative to the location of this Location entity itself.",
    )
    presence: Optional[Presence] = Field(
        "required",
        description="Whether the presence of the location target is required and it should be considered an error if it can not be found",
        examples=["required"],
    )


class Model(Model_1.Model):
    model_config = ConfigDict(
        extra="allow",
    )
    apiVersion: Optional[ApiVersion] = None
    kind: Optional[Kind] = None
    spec: Spec
