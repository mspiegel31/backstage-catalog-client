# generated by datamodel-codegen:
#   filename:  common
#   timestamp: 2024-02-27T19:48:38+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Optional

from pydantic import BaseModel, ConfigDict, Field, RootModel


class Model(BaseModel):
    pass
    model_config = ConfigDict(
        extra="allow",
    )


class Reference(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    kind: str = Field(..., description="The kind field of the entity.", min_length=1)
    namespace: str = Field(..., description="The metadata.namespace field of the entity.", min_length=1)
    name: str = Field(..., description="The metadata.name field of the entity.", min_length=1)


class Relation1(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: str = Field(..., description="The type of relation.", min_length=1, pattern="^\\w+$")
    target: Optional[Reference] = None
    targetRef: str = Field(..., description="The entity ref of the target of this relation.", min_length=1)


class StatusLevel(Enum):
    info = "info"
    warning = "warning"
    error = "error"


class Error(BaseModel):
    model_config = ConfigDict(
        extra="allow",
    )
    name: str = Field(
        ...,
        description="The type name of the error",
        examples=["Error", "InputError"],
        min_length=1,
    )
    message: str = Field(..., description="The message of the error")
    code: Optional[str] = Field(None, description="An error code associated with the error")
    stack: Optional[str] = Field(None, description="An error stack trace")


class Relation(RootModel[Any]):
    root: Any


class Status(RootModel[Any]):
    root: Any


class StatusItem(BaseModel):
    model_config = ConfigDict(
        extra="allow",
    )
    type: str = Field(..., min_length=1)
    level: StatusLevel = Field(..., description="The status level / severity of the status item.")
    message: str = Field(
        ...,
        description="A brief message describing the status, intended for human consumption.",
    )
    error: Optional[Error] = Field(None, description="An optional serialized error object related to the status.")


class Status1(BaseModel):
    model_config = ConfigDict(
        extra="allow",
    )
    items: Optional[list[StatusItem]] = None
